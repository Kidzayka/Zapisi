import mongoose from "mongoose"

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
interface Connection {
  isConnected?: number
}

const connection: Connection = {}

export const connectDB = async (): Promise<void> => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if (connection.isConnected) {
      console.log("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB")
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if (!process.env.MONGODB_URI) {
      throw new Error("‚ùå MONGODB_URI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const options = {
      bufferCommands: false,
      maxPoolSize: 10, // –ú–∞–∫—Å–∏–º—É–º 10 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –≤ –ø—É–ª–µ
      serverSelectionTimeoutMS: 5000, // –¢–∞–π–º–∞—É—Ç –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞
      socketTimeoutMS: 45000, // –¢–∞–π–º–∞—É—Ç —Å–æ–∫–µ—Ç–∞
      family: 4, // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å IPv4
      retryWrites: true,
      w: "majority",
    }

    console.log("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...")
    const db = await mongoose.connect(process.env.MONGODB_URI, options)

    connection.isConnected = db.connections[0].readyState

    console.log("‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    console.log(`üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${db.connections[0].name}`)
    console.log(`üåê –•–æ—Å—Ç: ${db.connections[0].host}:${db.connections[0].port}`)

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    mongoose.connection.on("connected", () => {
      console.log("üü¢ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
    })

    mongoose.connection.on("error", (err) => {
      console.error("üî¥ –û—à–∏–±–∫–∞ MongoDB:", err)
    })

    mongoose.connection.on("disconnected", () => {
      console.log("üü° MongoDB –æ—Ç–∫–ª—é—á–µ–Ω–∞")
      connection.isConnected = 0
    })

    // Graceful shutdown
    process.on("SIGINT", async () => {
      await mongoose.connection.close()
      console.log("üî¥ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ —á–µ—Ä–µ–∑ app termination")
      process.exit(0)
    })
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:", error)

    // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ
    if (error instanceof Error) {
      console.error("üìù –°–æ–æ–±—â–µ–Ω–∏–µ:", error.message)
      console.error("üìç Stack:", error.stack)
    }

    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
export const getConnectionStatus = (): string => {
  const state = mongoose.connection.readyState
  const states = {
    0: "disconnected",
    1: "connected",
    2: "connecting",
    3: "disconnecting",
  }
  return states[state as keyof typeof states] || "unknown"
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–î
export const getDatabaseStats = async () => {
  try {
    if (mongoose.connection.readyState !== 1) {
      throw new Error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
    }

    const stats = await mongoose.connection.db.stats()
    return {
      collections: stats.collections,
      dataSize: Math.round((stats.dataSize / 1024 / 1024) * 100) / 100, // MB
      indexSize: Math.round((stats.indexSize / 1024 / 1024) * 100) / 100, // MB
      objects: stats.objects,
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–î:", error)
    return null
  }
}
