export interface TagCategory {
  id: string
  name: string
  color: string
  icon: string
  description?: string
}

export interface EnhancedTag {
  id: string
  name: string
  category: string
  color: string
  description?: string
  usageCount: number
  createdAt: Date
  lastUsed: Date
  isSystem: boolean
  aliases: string[]
  parent?: string
  children: string[]
}

export const TAG_CATEGORIES: TagCategory[] = [
  {
    id: "therapy",
    name: "–¢–µ—Ä–∞–ø–∏—è",
    color: "#ef4444",
    icon: "üéØ",
    description: "–¢–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
  },
  {
    id: "age-group",
    name: "–í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã",
    color: "#3b82f6",
    icon: "üë•",
    description: "–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤",
  },
  {
    id: "skill-type",
    name: "–¢–∏–ø—ã –Ω–∞–≤—ã–∫–æ–≤",
    color: "#22c55e",
    icon: "üß†",
    description: "–†–∞–∑–≤–∏–≤–∞–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏",
  },
  {
    id: "session-format",
    name: "–§–æ—Ä–º–∞—Ç –∑–∞–Ω—è—Ç–∏–π",
    color: "#f59e0b",
    icon: "üìã",
    description: "–§–æ—Ä–º–∞—Ç –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è",
  },
  {
    id: "priority",
    name: "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
    color: "#8b5cf6",
    icon: "‚≠ê",
    description: "–£—Ä–æ–≤–µ–Ω—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞",
  },
  {
    id: "location",
    name: "–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è",
    color: "#06b6d4",
    icon: "üìç",
    description: "–õ–æ–∫–∞—Ü–∏—è –∑–∞–Ω—è—Ç–∏—è",
  },
]

export const SYSTEM_TAGS: EnhancedTag[] = [
  // –¢–µ—Ä–∞–ø–∏—è
  {
    id: "speech-therapy",
    name: "–õ–æ–≥–æ–ø–µ–¥–∏—è",
    category: "therapy",
    color: "#ef4444",
    usageCount: 0,
    createdAt: new Date(),
    lastUsed: new Date(),
    isSystem: true,
    aliases: ["—Ä–µ—á–µ–≤–∞—è —Ç–µ—Ä–∞–ø–∏—è", "–ª–æ–≥–æ–ø–µ–¥–∏—á–µ—Å–∫–æ–µ –∑–∞–Ω—è—Ç–∏–µ"],
    children: ["articulation", "phonetics"],
  },
  {
    id: "psychology",
    name: "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è",
    category: "therapy",
    color: "#ec4899",
    usageCount: 0,
    createdAt: new Date(),
    lastUsed: new Date(),
    isSystem: true,
    aliases: ["–ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å"],
    children: [],
  },

  // –í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã
  {
    id: "preschool",
    name: "–î–æ—à–∫–æ–ª—å–Ω–∏–∫–∏",
    category: "age-group",
    color: "#3b82f6",
    usageCount: 0,
    createdAt: new Date(),
    lastUsed: new Date(),
    isSystem: true,
    aliases: ["3-6 –ª–µ—Ç", "–¥–µ—Ç—Å–∫–∏–π —Å–∞–¥"],
    children: [],
  },
  {
    id: "school-age",
    name: "–®–∫–æ–ª—å–Ω–∏–∫–∏",
    category: "age-group",
    color: "#1d4ed8",
    usageCount: 0,
    createdAt: new Date(),
    lastUsed: new Date(),
    isSystem: true,
    aliases: ["7-17 –ª–µ—Ç", "—à–∫–æ–ª–∞"],
    children: [],
  },

  // –¢–∏–ø—ã –Ω–∞–≤—ã–∫–æ–≤
  {
    id: "reading",
    name: "–ß—Ç–µ–Ω–∏–µ",
    category: "skill-type",
    color: "#22c55e",
    usageCount: 0,
    createdAt: new Date(),
    lastUsed: new Date(),
    isSystem: true,
    aliases: ["–Ω–∞–≤—ã–∫–∏ —á—Ç–µ–Ω–∏—è"],
    children: [],
  },
  {
    id: "writing",
    name: "–ü–∏—Å—å–º–æ",
    category: "skill-type",
    color: "#16a34a",
    usageCount: 0,
    createdAt: new Date(),
    lastUsed: new Date(),
    isSystem: true,
    aliases: ["–Ω–∞–≤—ã–∫–∏ –ø–∏—Å—å–º–∞", "–∫–∞–ª–ª–∏–≥—Ä–∞—Ñ–∏—è"],
    children: [],
  },

  // –§–æ—Ä–º–∞—Ç –∑–∞–Ω—è—Ç–∏–π
  {
    id: "individual",
    name: "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ",
    category: "session-format",
    color: "#f59e0b",
    usageCount: 0,
    createdAt: new Date(),
    lastUsed: new Date(),
    isSystem: true,
    aliases: ["1 –Ω–∞ 1", "–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ"],
    children: [],
  },
  {
    id: "group",
    name: "–ì—Ä—É–ø–ø–æ–≤–æ–µ",
    category: "session-format",
    color: "#d97706",
    usageCount: 0,
    createdAt: new Date(),
    lastUsed: new Date(),
    isSystem: true,
    aliases: ["–≥—Ä—É–ø–ø–∞", "–∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–µ"],
    children: [],
  },

  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
  {
    id: "high-priority",
    name: "–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
    category: "priority",
    color: "#dc2626",
    usageCount: 0,
    createdAt: new Date(),
    lastUsed: new Date(),
    isSystem: true,
    aliases: ["—Å—Ä–æ—á–Ω–æ", "–≤–∞–∂–Ω–æ"],
    children: [],
  },
  {
    id: "normal-priority",
    name: "–û–±—ã—á–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
    category: "priority",
    color: "#8b5cf6",
    usageCount: 0,
    createdAt: new Date(),
    lastUsed: new Date(),
    isSystem: true,
    aliases: ["—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ"],
    children: [],
  },
]

export class TagSystemManager {
  private tags: Map<string, EnhancedTag> = new Map()

  constructor() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ —Ç–µ–≥–∞–º–∏
    SYSTEM_TAGS.forEach((tag) => {
      this.tags.set(tag.id, { ...tag })
    })
  }

  createTag(tag: Omit<EnhancedTag, "id" | "createdAt" | "lastUsed" | "usageCount" | "isSystem">): EnhancedTag {
    const id = this.generateTagId(tag.name)
    const newTag: EnhancedTag = {
      ...tag,
      id,
      createdAt: new Date(),
      lastUsed: new Date(),
      usageCount: 0,
      isSystem: false,
    }

    this.tags.set(id, newTag)
    return newTag
  }

  updateTag(id: string, updates: Partial<EnhancedTag>): boolean {
    const tag = this.tags.get(id)
    if (!tag || tag.isSystem) return false

    this.tags.set(id, { ...tag, ...updates })
    return true
  }

  deleteTag(id: string): boolean {
    const tag = this.tags.get(id)
    if (!tag || tag.isSystem) return false

    return this.tags.delete(id)
  }

  getTag(id: string): EnhancedTag | undefined {
    return this.tags.get(id)
  }

  getAllTags(): EnhancedTag[] {
    return Array.from(this.tags.values())
  }

  getTagsByCategory(categoryId: string): EnhancedTag[] {
    return this.getAllTags().filter((tag) => tag.category === categoryId)
  }

  searchTags(query: string): EnhancedTag[] {
    const lowerQuery = query.toLowerCase()
    return this.getAllTags().filter(
      (tag) =>
        tag.name.toLowerCase().includes(lowerQuery) ||
        tag.aliases.some((alias) => alias.toLowerCase().includes(lowerQuery)),
    )
  }

  incrementTagUsage(tagName: string): void {
    const tag = Array.from(this.tags.values()).find((t) => t.name === tagName || t.aliases.includes(tagName))

    if (tag) {
      tag.usageCount++
      tag.lastUsed = new Date()
    }
  }

  getMostUsedTags(limit = 10): EnhancedTag[] {
    return this.getAllTags()
      .sort((a, b) => b.usageCount - a.usageCount)
      .slice(0, limit)
  }

  getRecentTags(limit = 10): EnhancedTag[] {
    return this.getAllTags()
      .sort((a, b) => b.lastUsed.getTime() - a.lastUsed.getTime())
      .slice(0, limit)
  }

  getTagSuggestions(query: string): string[] {
    const suggestions = new Set<string>()

    // –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∞–º
    this.searchTags(query).forEach((tag) => {
      suggestions.add(tag.name)
      tag.aliases.forEach((alias) => {
        if (alias.toLowerCase().includes(query.toLowerCase())) {
          suggestions.add(alias)
        }
      })
    })

    return Array.from(suggestions).slice(0, 8)
  }

  private generateTagId(name: string): string {
    return name
      .toLowerCase()
      .replace(/[^a-zA-Z–∞-—è–ê-–Ø0-9]/g, "-")
      .replace(/-+/g, "-")
      .replace(/^-|-$/g, "")
  }
}
